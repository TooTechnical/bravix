"""
Braivix â€“ Report Generation & PDF Download (v3.0)
-------------------------------------------------
Generates a downloadable PDF including:
- Company Class (Aâ€“E)
- Moodyâ€™s & S&P equivalents
- 18-indicator grades
- AI summary
"""
import os, json, datetime
from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse
from fpdf import FPDF

router = APIRouter()
TMP_PATH = "/tmp/last_analysis.json"
PDF_PATH = "/tmp/report.pdf"

# --------------------------------------------------------------
# ðŸ§© PDF Template
# --------------------------------------------------------------
class PDF(FPDF):
    def header(self):
        self.set_font("Helvetica", "B", 15)
        self.cell(0, 10, "Braivix Credit Evaluation Report", ln=True, align="C")
        self.set_font("Helvetica", "I", 9)
        self.cell(0, 8, "AI-driven Financial Analysis & Rating Summary", ln=True, align="C")
        self.ln(6)

    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 8)
        self.cell(0, 10, f"Page {self.page_no()} | Generated by Braivix", align="C")


# --------------------------------------------------------------
# ðŸ“„ PDF Generation Endpoint
# --------------------------------------------------------------
@router.get("/report/download")
def download_report():
    """Generate and return the last AI report as a downloadable PDF."""
    if not os.path.exists(TMP_PATH):
        raise HTTPException(status_code=404, detail="No report found. Please analyze a file first.")

    with open(TMP_PATH, "r") as f:
        data = json.load(f)

    structured = data.get("structured_report", {})
    summary = structured.get("summary") or data.get("analysis_raw") or "No summary available."
    scores = data.get("scores", {})

    company = (
        data.get("data", {}).get("indicators", {}).get("company_name")
        or "Unknown_Company"
    )
    eval_score = scores.get("evaluation_score", "N/A")
    risk = scores.get("risk_category", "N/A")
    decision = scores.get("credit_decision", "N/A")
    company_class = scores.get("company_class", "N/A")

    ratings = scores.get("ratings", {"Moodys": "N/A", "S&P": "N/A"})

    # ---------------------- Generate PDF ----------------------
    pdf = PDF()
    pdf.add_page()

    # Header section
    pdf.set_font("Helvetica", "B", 13)
    pdf.cell(0, 10, f"Company: {company}", ln=True)
    pdf.set_font("Helvetica", "", 11)
    pdf.cell(0, 8, f"Date: {datetime.date.today()}", ln=True)
    pdf.cell(0, 8, f"Company Class: {company_class}", ln=True)
    pdf.cell(0, 8, f"Evaluation Score: {eval_score}", ln=True)
    pdf.cell(0, 8, f"Risk Category: {risk}", ln=True)
    pdf.cell(0, 8, f"Credit Decision: {decision}", ln=True)
    pdf.cell(0, 8, f"Moodyâ€™s Rating: {ratings.get('Moodys', 'N/A')}", ln=True)
    pdf.cell(0, 8, f"S&P Rating: {ratings.get('S&P', 'N/A')}", ln=True)
    pdf.ln(8)

    # Summary Section
    pdf.set_font("Helvetica", "B", 12)
    pdf.cell(0, 10, "AI Summary", ln=True)
    pdf.set_font("Helvetica", "", 11)
    pdf.multi_cell(0, 8, summary)
    pdf.ln(8)

    # Indicator Grades
    pdf.set_font("Helvetica", "B", 12)
    pdf.cell(0, 10, "Indicator Grades", ln=True)
    pdf.set_font("Helvetica", "", 10)
    grades = scores.get("grades", {})
    for k, v in grades.items():
        pdf.cell(0, 7, f"{k.replace('_', ' ').title()}: {v}/5", ln=True)

    # Ratings Key
    pdf.ln(10)
    pdf.set_font("Helvetica", "B", 12)
    pdf.cell(0, 10, "Rating Key (for reference)", ln=True)
    pdf.set_font("Helvetica", "", 10)
    pdf.multi_cell(
        0,
        7,
        """A â†’ Moodyâ€™s: Aaaâ€“A2 | S&P: AAAâ€“A  â†’ Excellent
B â†’ Moodyâ€™s: Baa1â€“Baa3 | S&P: BBB+ â†’ Good
C â†’ Moodyâ€™s: Ba1â€“Ba3 | S&P: BB â†’ Average
D â†’ Moodyâ€™s: B1â€“B3 | S&P: B â†’ Weak
E â†’ Moodyâ€™s: Caaâ€“C | S&P: CCCâ€“D â†’ Critical""",
    )

    # Save PDF
    pdf.output(PDF_PATH)

    clean_name = "".join(c if c.isalnum() else "_" for c in company)[:30]
    filename = f"{clean_name}_Report_{datetime.date.today()}.pdf"

    # Return file
    return FileResponse(
        PDF_PATH,
        filename=filename,
        media_type="application/pdf",
        headers={"Cache-Control": "no-store", "Access-Control-Allow-Origin": "*"},
    )
